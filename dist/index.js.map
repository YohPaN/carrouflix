{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { Config, ConfigSetup, ConfigStyle, GlobalArrayItems } from './config';\nimport './style.css';\n\nclass Carouflix {\n    config: Config = {\n        setup: {\n            imageStep: 1,\n            transitionTime: 1,\n            imageDisplayed: 1,\n            stopOnLastPicture: true,\n            aWraper: false,\n        },\n        style: {\n            backgroundColor: 'transparent',\n            useDefaultNavigationToggle: true,\n            navigationToggleSize: 'md',\n            color: 'white',\n        },\n    }\n\n    imageWidth: number = 0;\n    dataSet: string[] = [];\n    dataSetHref: string[] = [];\n    sliderCounterStart: number = 0;\n    sliderCounterEnd: number = 0;\n    slider: HTMLDivElement = document.createElement(\"div\");\n    globalArray: GlobalArrayItems[] = [];\n    maxLeftOffset: number = 0;\n    pending: boolean = false;\n    imageDisplayedPlusImageStep: number = 0;\n    pxToVw: number = 0;\n\n    /**Construction of the Carouflix class\n     * @constructs Carouflix\n     * @param {Array} dataSet \n     * @param {Object} config \n     */\n    constructor(container: HTMLElement, dataSet: string[], config: Config, dataSetHref: string[]) {\n        const start = performance.now()\n        this.inputValidation(container, dataSet, config, dataSetHref).then(() => {\n            const end = performance.now()\n            console.log(end - start)\n\n            this.config.setup = {...this.config.setup, ...config.setup};\n            this.config.style = {...this.config.style, ...config.style};\n            this.dataSet = dataSet;\n            if(this.config.setup.aWraper) {\n                this.dataSetHref = dataSetHref;\n            }\n            this.sliderCounterStart = Math.max(this.config.setup.imageStep, this.config.setup.imageDisplayed);\n            this.imageDisplayedPlusImageStep = this.config.setup.imageDisplayed + this.config.setup.imageStep\n            this.sliderCounterEnd = Math.max(this.imageDisplayedPlusImageStep - 1, this.config.setup.imageDisplayed * 2 - 1);\n            let temp: number = container.offsetWidth\n            if(container.offsetWidth === 0 ) {\n                temp = 500;\n            }\n            this.imageWidth = temp / this.config.setup.imageDisplayed;\n            this.maxLeftOffset = this.imageWidth * Math.max(this.imageDisplayedPlusImageStep + this.config.setup.imageStep, this.config.setup.imageDisplayed * 3);\n            this.pxToVw = document.documentElement.clientWidth / 100;\n            console.log('construct')\n\n        }).then(() => {\n            console.log('initilize')\n            this.initialization(container);\n        })\n    }\n\n    /**Initialization of the slider by creating the DOM element, defining CSS values and setting up first images to display\n     * @function initialization\n     * @param {HTMLDivElement} container \n     */\n    private initialization(container: HTMLElement): void {\n        const root = document.documentElement;\n        this.domCreation(container);\n        \n        //Initialization of css values\n        root.style.setProperty('--transition-time', this.config.setup.transitionTime + 's');\n        root.style.setProperty('--item-width', this.imageWidth / this.pxToVw + 'vw');\n        root.style.setProperty('--slider-width', (Math.max(this.imageDisplayedPlusImageStep + this.config.setup.imageStep, this.config.setup.imageDisplayed * 3) * this.imageWidth) / this.pxToVw + 'vw');\n        root.style.setProperty('--slider-left', Math.min(this.config.setup.imageStep * this.imageWidth * -1, this.config.setup.imageDisplayed * this.imageWidth * -1)  / this.pxToVw + 'vw');\n        root.style.setProperty('--carouflix-background-color', this.config.style.backgroundColor);\n        root.style.setProperty('--color', this.config.style.color);\n\n        switch (this.config.style.navigationToggleSize) {\n            case 'sm':\n                root.style.setProperty('--navigation-toggle-size', 20 + 'px');\n                break;\n            case 'md':\n                root.style.setProperty('--navigation-toggle-size', 50 + 'px');\n                break;\n            case 'xl':\n                root.style.setProperty('--navigation-toggle-size', 100 + 'px');\n                break;\n        }\n\n        this.setUpFirstImages();\n    }\n\n    /**Input validation for dataSet and config Ojbect\n     * @function\n     * @param {Object} config\n     * @param {Array} dataSet  \n     * @param {Array} dataSetHref\n     * @param {HTMLElement} container  \n     */\n    private inputValidation(container: HTMLElement, dataSet: string[], config: Config, dataSetHref: string[]): Promise<void> {\n        console.log('validate')\n\n        return new Promise((resolve) => {\n            if(container === undefined) {\n                throw new Error('You need to define a HTML element and wait for the DOM was fully load')\n            }\n    \n            const testContainer: HTMLElement = container;\n            const testInsert: HTMLDivElement = document.createElement('div');\n            try {\n                testContainer.append(testInsert);\n            } catch (error) {\n                throw new Error('You need to provide a valid HTML element')\n            }\n    \n    \n            if(config === undefined) {\n                throw new Error('You need to provide an array of image paths and a config object, even if config object is empty')\n            }\n            if(!Array.isArray(dataSet)) {\n                throw new TypeError(\"dataSet must be an array\");\n            }\n    \n            if(dataSet.length < 1) {\n                throw new RangeError(\"dataSet must contain at least one element\");\n            }\n    \n            if (dataSet.some(element => typeof element !== 'string')) {\n                throw new TypeError(\"dataSet values must be strings\");\n            }\n            if(config.setup.hasOwnProperty('aWraper')) {\n                if(config.setup.aWraper) {\n                    if(dataSetHref === undefined) {\n                        throw new Error(\"dataSetHref must be set if config.setup.aWraper is true\");\n                    }\n                    if(!Array.isArray(dataSetHref)) {\n                        throw new TypeError(\"dataSetHref must be an array\");\n                    }\n                    if(dataSetHref.length < 1) {\n                        throw new RangeError(\"dataSetHref must contain at least one element\");\n                    }\n                    if (dataSetHref.some(element => typeof element !== 'string')) {\n                        throw new TypeError(\"dataSetHref values must be strings\");\n                    }\n                    if (dataSetHref.length != dataSet.length) {\n                        throw new TypeError(\"dataSetHref must have the same length as dataSet\");\n                    }\n                }\n            }\n            if(config.setup.hasOwnProperty('imageDisplayed')) {\n                if(config.setup.imageDisplayed > dataSet.length) {\n                    throw new Error(\"The number of image displayed can't be superior to dataSet.\")\n                }\n            }\n            \n            this.configValidationSwitch(config.setup, config.style);\n\n            resolve();\n        })\n    }\n\n    /**Switch used to test each value of config object\n     * @function\n     * @param {Object} subConfig \n     */\n    private configValidationSwitch(setupConfig: ConfigSetup, styleConfig: ConfigStyle): void {\n        const backgroundColor: CSSStyleDeclaration = new Option().style;\n        const color: CSSStyleDeclaration = new Option().style;\n\n\n        for(let setup in setupConfig) {\n            switch (setup) {\n                case 'imageStep':\n                    if(typeof setupConfig.imageStep != 'number') {\n                        throw new TypeError('config.setup.imageStep must be a Number');\n                    } else if(setupConfig['imageStep'] < 1) {\n                        throw new Error('config.setup.imageStep must be greater than one');\n                    }\n                    break;\n                case 'transitionTime':\n                    if(typeof setupConfig['transitionTime'] != 'number') {\n                        throw new TypeError('config.setup.transitionTime must be a Number');\n                    } else if(setupConfig['transitionTime'] <= 0) {\n                        throw new Error('config.setup.transitionTime must be greater than zero');\n                    }\n                    break;\n                case 'imageDisplayed':\n                    if(typeof setupConfig['imageDisplayed'] != 'number') {\n                        throw new TypeError('config.setup.imageDisplayed must be a Number');\n                    } else if(setupConfig['imageDisplayed'] < 1) {\n                        throw new RangeError('config.setup.imageDisplayed must be greater than one');\n                    }\n                    break;\n                case 'stopOnLastPicture':\n                    if(typeof setupConfig['stopOnLastPicture'] != 'boolean') {\n                        throw new TypeError('config.setup.stopOnLastPicture must be a Boolean');\n                    }\n                    break;\n                case 'aWraper':\n                    if(typeof setupConfig['aWraper'] != 'boolean') {\n                        throw new TypeError('config.setup.aWraper must be a Boolean');\n                    }\n                    break;\n                default:\n                    throw new Error('parameter not recognize: ' + setup);\n            }\n        }\n        \n        const sizeArray: string[] = ['sm', 'md', 'xl'];\n\n        for(let style in styleConfig) {\n            switch (style) {\n                case 'backgroundColor':\n                    backgroundColor.color = styleConfig['backgroundColor'];\n                    if(backgroundColor.color === \"\") {\n                        throw new Error('config.style.backgroundColor must be a valid CSS <color>');\n                    }\n                    break;\n                case 'color':\n                    color.color = styleConfig['color'];\n                    if(color.color === \"\") {\n                        throw new Error('config.style.color must be a valid CSS <color>');\n                    }\n                    break;\n                case 'useDefaultNavigationToggle':\n                    if(typeof styleConfig['useDefaultNavigationToggle'] != 'boolean') {\n                        throw new TypeError('config.style.useDefaultNavigationToggle must be a Boolean');\n                    }\n                    break;\n                case 'navigationToggleSize':\n                    if(!sizeArray.includes(styleConfig['navigationToggleSize'])) {\n                        throw new Error('config.style.navigationToggleSize must be a \"sm\", \"md\" or \"xl\"');\n                    }\n                    break;\n                default:\n                    throw new Error('parameter not recognize: ' + style);\n            }\n        }\n    }\n\n    /**Create DOM elements for the slider\n     * @function domCreation\n     * @param {HTMLDivElement} container\n     * @returns {HTMLDivElement} Return slider element \n     */\n    private domCreation(container: HTMLElement): void {\n        //button\n        const leftButton = this.navigationToggleButtonFactory('left');\n        const rightButton = this.navigationToggleButtonFactory('right');\n\n        //slider\n        this.slider.setAttribute('class', 'slider');\n\n        //add element to the DOM\n        container.append(leftButton);\n        container.append(rightButton);\n        container.append(this.slider);\n    }\n\n    /**Factory to build buttons to navigate into the slider\n     * @function navigationToggleButtonFactory\n     * @param {String} direction\n     * @returns {HTMLButtonElement} \n     */\n    private navigationToggleButtonFactory(direction: string): HTMLButtonElement {\n        const listnerValue = direction === 'left' ? -1 : 1;\n\n        const button: HTMLButtonElement = document.createElement('button');\n        button.setAttribute('id', `${direction}-navigation-toggle`);\n        button.setAttribute('class', 'navigation-toggle');\n        button.addEventListener('click', () => {\n            this.goTo(listnerValue)\n        });\n\n        if(this.config.style.useDefaultNavigationToggle) {\n            button.classList.add(`${direction}-navigation-toggle-logo`)\n        }\n\n        return button;\n    }\n\n\n    /**Set up first images that will be display\n     * @function setUpFirstImages\n     */\n    private setUpFirstImages(): void {\n        let dataSetKey: number = 0;\n        let endLoop: number = 0;\n        let imageDisplayStart: number = 0;\n        let imageDisplayEnd: number = 0;\n\n        if(this.imageDisplayedPlusImageStep + this.config.setup.imageStep < this.config.setup.imageDisplayed * 3) {\n            endLoop = this.config.setup.imageDisplayed * 3;\n            imageDisplayStart = this.config.setup.imageDisplayed;\n            imageDisplayEnd = this.config.setup.imageDisplayed * 2;\n        } else {\n            endLoop = this.imageDisplayedPlusImageStep + this.config.setup.imageStep\n            imageDisplayStart = this.config.setup.imageStep;\n            imageDisplayEnd = this.imageDisplayedPlusImageStep;\n        }\n\n        //Main loop to display a number of div, before and after image display, equal to the imageStep and a div for each image display\n        for (let index = 0; index < endLoop; index++) {\n            const leftOffset: number = this.imageWidth * index;\n            const imageContainer: [HTMLDivElement, HTMLImageElement, HTMLAnchorElement] = this.imageFactory(index);\n\n            //If images are not in the display area, we do not defining a src for the img element\n            if(index < imageDisplayStart || index >= imageDisplayEnd) {\n                this.settingUpGlobalArray(index, imageContainer, leftOffset, null, \"\", \"\");\n\n            } else {\n                this.settingUpGlobalArray(index, imageContainer, leftOffset, dataSetKey, this.dataSet[index - imageDisplayStart], this.dataSetHref[index - imageDisplayStart]);\n                dataSetKey++\n            }\n            this.globalArray[index].htmlElement.style.left = this.globalArray[index].leftOffset / this.pxToVw + 'vw';\n        }\n    }\n\n    /**Adding object to globalArray that represent div element with their left offset, src, ect\n     * @function settingUpGlobalArray\n     * @param {Number} index\n     * @param {Array[HTMLElement]} htmlElements\n     * @param {Number} leftOffset\n     * @param {Number} arrayKey\n     * @param {String} src    \n     * @param {String} href  \n     */\n    private settingUpGlobalArray(index: number, htmlElements: [HTMLDivElement, HTMLImageElement, HTMLAnchorElement], leftOffset: number, arrayKey: number | null, src: string, href: string) {\n        const globalArrayItem: GlobalArrayItems = {\n            htmlElement: htmlElements[0], \n            htmlImage: htmlElements[1],\n            htmlAnchor: htmlElements[2],\n            leftOffset: leftOffset, \n            arrayKey: arrayKey, \n            src: src, \n            href: href\n        }\n        this.globalArray[index] = globalArrayItem;\n        this.globalArray[index].htmlImage.src = src;\n        this.config.setup.aWraper ? this.globalArray[index].htmlAnchor.href = href : null;\n    }\n\n    /**Factory for img element creation\n     * @function imageFactory\n     * @param {Number} index \n     * @returns {HTMLDivElement} Return the container with its image\n     */\n    private imageFactory(index: number): [HTMLDivElement, HTMLImageElement, HTMLAnchorElement] {\n        let imgContainer;\n        const divContainer: HTMLDivElement = document.createElement('div');\n        let aWraper: HTMLAnchorElement = document.createElement('a');\n        divContainer.classList.add('item');\n\n        if(this.config.setup.aWraper) {\n            aWraper.setAttribute('href', '');\n            divContainer.append(aWraper)\n            imgContainer = aWraper;\n        } else {\n            imgContainer = divContainer;\n        }\n\n        const img: HTMLImageElement = document.createElement(\"img\");\n        img.setAttribute('id', `item${index}`)\n        imgContainer.append(img)\n\n        this.slider.append(divContainer);\n        return [divContainer, img, aWraper];\n    }\n\n    /**Function to navigate through the slider\n     * @function goTo\n     * @param {Number} direction determine the direction \n     */\n    private goTo(direction: number) {\n        if(!this.pending) {\n            this.pending = true;\n            this.setSrcToImg(direction)\n                .then((returnArray: number[]) => {\n                    this.setNewLeftOffset(returnArray[0]) \n                    .then(() => {\n                        this.slideImages().then(() => {\n                            this.unsetSrcImages(direction, -returnArray[1]).then(() => {\n                                this.pending = false;\n                            });\n                            const addToCounter = (this.config.setup.imageStep - returnArray[1]) * direction * -1;\n                            this.sliderCounterStart = this.strictModulo(this.sliderCounterStart - addToCounter, this.globalArray.length);\n                            this.sliderCounterEnd = this.strictModulo(this.sliderCounterEnd - addToCounter, this.globalArray.length);\n                        });\n                    })\n                })\n        }  \n    }\n\n    /**Set src to img element to will be display\n     * @function setSrcToImg\n     * @param {Number} direction \n     */\n    private setSrcToImg(direction: number): Promise<number[]> {\n        return new Promise((resolve) => {\n\n            let stepFunction = 0;\n            let offsetRight = 0;\n            let counterUsed = 0;\n\n            if(direction === 1) {\n                counterUsed = this.sliderCounterEnd\n            } else {\n                counterUsed = this.sliderCounterStart\n            }\n\n            for (let index = 0; index < this.config.setup.imageStep - offsetRight; index++) {\n                const globalArrayIndex = this.strictModulo(counterUsed + (1 + index) * direction, this.globalArray.length);\n                const globalArrayIndexForArrayKey: number | null = this.globalArray[this.strictModulo(counterUsed + index * direction, this.globalArray.length)].arrayKey;\n                if(globalArrayIndexForArrayKey === null) {\n                    throw new Error(\"Something went wrong\");\n                }\n                const arrayKey =this.strictModulo(globalArrayIndexForArrayKey + 1 * direction, this.dataSet.length);\n                \n                if(arrayKey !== 0 || !this.config.setup.stopOnLastPicture || this.config.setup.imageStep === 1) {\n                    this.globalArray[globalArrayIndex].htmlImage.src = this.dataSet[arrayKey];\n                    this.config.setup.aWraper ? this.globalArray[globalArrayIndex].htmlAnchor.href = this.dataSetHref[arrayKey] : null;\n\n                    this.globalArray[globalArrayIndex].arrayKey = arrayKey;\n                } else if(arrayKey === 0 && index === 0) {\n                    this.globalArray[globalArrayIndex].htmlImage.src = this.dataSet[arrayKey];\n                    this.config.setup.aWraper ? this.globalArray[globalArrayIndex].htmlAnchor.href = this.dataSetHref[arrayKey] : null;\n\n                    this.globalArray[globalArrayIndex].arrayKey = arrayKey;\n                    offsetRight = -(this.config.setup.imageDisplayed - this.config.setup.imageStep) * direction;\n                } else if(direction !== -1){\n                    offsetRight = this.config.setup.imageStep - index;\n                    break;\n                } else {\n                    this.globalArray[globalArrayIndex].htmlImage.src = this.dataSet[arrayKey];\n                    this.config.setup.aWraper ? this.globalArray[globalArrayIndex].htmlAnchor.href = this.dataSetHref[arrayKey] : null;\n\n                    this.globalArray[globalArrayIndex].arrayKey = arrayKey;\n                    offsetRight = this.config.setup.imageStep - index - 1;\n                    break;\n                }\n            }\n\n            stepFunction = (this.config.setup.imageStep - offsetRight) * this.imageWidth * direction *-1;\n\n            resolve([stepFunction, offsetRight]);\n        })\n    }\n\n    /**Determine the new left offset for images\n     * @function setNewLeftOffset\n     * @param {Number} stepFunction \n     */\n    private setNewLeftOffset(stepFunction: number): Promise<void> {\n        return new Promise((resolve) => {\n            this.globalArray.forEach(element => {\n                element.leftOffset = this.strictModulo(element.leftOffset + stepFunction, this.maxLeftOffset);\n                if(Math.round(element.leftOffset) == Math.round(this.maxLeftOffset)) {\n                    element.leftOffset = 0;\n                }\n            });\n            resolve();\n        })\n    }\n\n    /**Do the slide for each images\n     * @function slideImages\n     */\n    private slideImages(): Promise<void> {\n        return new Promise((resolve) => {\n            this.globalArray.forEach(element => {\n                element.htmlElement.style.left = element.leftOffset / this.pxToVw + 'vw'\n            });\n            setTimeout(() => {\n                resolve();\n            }, this.config.setup.transitionTime * 1000)\n        })\n    }\n\n    /**Unset src for img that are not display anymore\n     * @function unsetSrcImages\n     * @param {Number} direction \n     * @param {NUmber} offsetRight \n     */\n    private unsetSrcImages(direction: number, offsetRight: number): Promise<void>{\n        return new Promise((resolve) => {\n            let counterUsed = 0;\n            if(direction === 1) {\n                counterUsed = this.sliderCounterStart;\n            } else if(direction === -1) {\n                counterUsed = this.sliderCounterEnd;\n            }\n\n            for (let index = 0; index < this.config.setup.imageStep + offsetRight; index++) {\n                const myIndex = this.strictModulo(counterUsed + index * direction, this.globalArray.length);\n                this.globalArray[myIndex].htmlImage.src = \"\";\n                this.config.setup.aWraper ? this.globalArray[myIndex].htmlAnchor.href = \"\" : null;\n                this.globalArray[myIndex].arrayKey = null;  \n            }\n            resolve();\n        })\n    }\n\n    /**Return strict index of globalArray with modulo to loop\n     * @function strictModulo\n     * @param {Number} value\n     * @param {Number} modulo \n     * @returns {Number} \n     */\n    private strictModulo(value: number, modulo: number) {\n        return (value + modulo) % modulo;\n    }\n}\n\nexport default Carouflix;\n"],"mappings":"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","names":[]}